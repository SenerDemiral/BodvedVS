@inject IScopedContainer ScpC
@inject IDataAccess db
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/Oyn"

<PageTitle>Oyuncular</PageTitle>

@if (pp != null)
{
    <div class="table-container @pointerEvent" tabindex="-1">
        <div class="tc--header fs-12">
            <div>@((MarkupString)bi.BelgeInfo)</div>
        </div>
        <div class="tc--content">
            <QuickGrid Items=@FilteredPlayers Pagination="@pagination" @ref=ppGrid Class="fs-12">
                @if (ScpC.IsAdm || ScpC.IsTnm)
                {
                    <TemplateColumn Title="Edt">
                        <button @onclick="() => ShowModal(context.PPId)">✏️</button>
                    </TemplateColumn>
                }
                <PropertyColumn Property="@(p => p.PPId)"
                                Sortable="true"
                                Align="Align.Center"
                                Title="Id" />
                <TemplateColumn Title="Detay">
                    <a href="MacOyn/@context.PPId" >🏁</a>
                    @* <span style="padding-right:4px">@((MarkupString)context.Link)</span> *@
                </TemplateColumn>
                <PropertyColumn Property="@(p => p.Ad)" Class="wdth-100"
                                Sortable="true">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Player name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <TemplateColumn Title="Belge">
                    <span style="padding-right:4px; width:160px;display: inline-block;">@((MarkupString)context.Belge)</span>
                </TemplateColumn>
                <PropertyColumn Property="@(p => p.R)"
                                Sortable="true"
                                Format="#" Align="Align.Center"
                                Title="Rank" />
                <PropertyColumn Property="@(p => p.PX)"
                                Sortable="true"
                                Format="#"
                                Align="Align.Center" />
                <PropertyColumn Property="@(p => p.SMW)"
                                Sortable="true"
                                Format="#"
                                Align="Align.Center" />
                <PropertyColumn Property="@(p => p.SML)"
                                Sortable="true"
                                Format="#"
                                Align="Align.Center" />
                <PropertyColumn Property="@(p => p.DMW)"
                                Sortable="true"
                                Format="#"
                                Align="Align.Center" />
                <PropertyColumn Property="@(p => p.DML)"
                                Sortable="true"
                                Format="#"
                                Align="Align.Center" />
                <PropertyColumn Property="@(p => p.TC)"
                                Sortable="true"
                                Format="#"
                                Align="Align.Center"
                                Title="#Tkm" />
                <PropertyColumn Property="@(p => p.DC)"
                                Sortable="true"
                                Format="#"
                                Align="Align.Center"
                                Title="#Szn" />
            </QuickGrid>
            <Paginator State="@pagination" />
        </div>
    </div>
}

@if (showModal)
{
    <div class="modal">
        <InpOynRec PPId=@inpPPid OnSaved="Saved" OnCancelled="Cancelled" />
    </div>
}

@code {
    BI bi;
    IQueryable<PP> pp;
    QuickGrid<PP> ppGrid;
    private string nameFilter;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };

    private int inpPPid { get; set; }
    private string pointerEvent = "pe-auto";
    private bool _showModal;
    private bool showModal
    {
        get => _showModal;
        set
        {
            _showModal = value;
            pointerEvent = _showModal ? "pe-none" : "pe-auto";
        }
    }

    private void ShowModal(int ppId)
    {
        if (showModal)
            showModal = false;
        else
        {
            this.inpPPid = ppId;
            showModal = true;
        }
    }

    public void Cancelled()
    {
        showModal = false;
    }

    public void Saved()
    {
        showModal = false;

        var r = pp.SingleOrDefault((r) => r.PPId == inpPPid);

        if (r != null)
        {
            var rr = db.LoadRec<PPS, dynamic>("select PPId, AdS, Belge from PP where PPId = @PPId", new { PPid = inpPPid });

            r.Ad = rr.AdS;
            r.Belge = rr.Belge;
        }
    }

    IQueryable<PP> FilteredPlayers
    {
        get
        {
            var result = pp;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Ad.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        bi = db.LoadRec<BI, dynamic>("select * from BELGE_INFO", new { });
        pp = (await db.LoadDataAsync<PP, dynamic>($"select * from UI_OYN", new { })).AsQueryable();
    }

    private sealed class BI
    {
        public string BelgeInfo { get; set; }
    }

    private sealed class PPS
    {
        public int PPId { get; set; }
        public string AdS { get; set; }
        public string Belge { get; set; }
    }

    private sealed class PP
    {
        public int PPId { get; set; }

        public string Ad { get; set; }
        public int R { get; set; }
        public int PX { get; set; }
        public int SMW { get; set; }
        public int SML { get; set; }
        public int DMW { get; set; }
        public int DML { get; set; }
        public int TC { get; set; } // Takim Count
        public int DC { get; set; } // Dnm/Szn Count
        public string DnmS { get; set; }    // Donemler 17,18,..
        public string Belge { get; set; }
        //public string Link { get; set; }
        //public string Edt { get; set; }
    }

}
