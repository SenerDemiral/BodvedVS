@inject IDataAccess db
@inject IAllUsrs AllUsrs
@inject NavigationManager Navigation

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/InpOynTkm/{ctid:int}/{header}"

<h1>@Header Oyuncuları</h1>
@if (to != null)
{
    <div style="display:flex;justify-content:space-between;">
        <button readonly="@RO" @onclick="Insert">➕Ekle</button>
        <div>
            @* <button readonly="@RO" @onclick="Cancel" style="margin-right: 10px;">🚫İptal</button> *@
            <button readonly="@RO" @onclick="Save">✅Kaydet</button>
        </div>
    </div>
    <table class="table-edit">
        <thead>
            <tr style="background-color:skyblue !important">
                <th></th>
                <th>MF</th>
                <th>Sil</th>
                <th>Ad</th>
                <th>Oync</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in to)
            {
                <tr>
                    <td>
                        <button readonly="@RO" @onclick="() => Original(r)">🔄</button>
                    </td>
                    <td class="text-center">@r.MF</td>
                    <td>
                        <button readonly="@RO" @onclick="() => Delete(r)">❌</button>
                    </td>
                    @if (r.MF == "+")
                    {
                        <td>
                            <input readonly="@RO"
                                   list="PP"
                                   @bind="r.PPAd"
                                   @bind:after='() => CheckPP(r)' />
                        </td>
                    }
                    else
                    {
                        <td>@r.PPAd</td>
                    }
                    @* <td><a href="InpOynRec/@r.PPId"> 👤✏️</a></td> *@
                    <td><button @onclick="() => ShowModal(r.PPId)">👤✏️</button></td>
                </tr>
            }
        </tbody>
    </table>

    <datalist id="PP">
        @foreach (var r in pp)
        {
            <option value="@r.Key" />
        }
    </datalist>
}
else
{
    <div>...</div>
}

@if (showModal)
{
    <div class="modal">
        <InpOynRec PPId=@inpPPid OnSaved="Saved" OnCancelled="Cancelled" />
    </div>
}

@code {
    [CascadingParameter] public required Usr Usr { get; set; }
    [Parameter] public int CTId { get; set; }
    [Parameter] public string Header { get; set; }
    
    private List<TO>? to;
    private List<PP>? zz;
    private HashSet<PP>? hh;
    private Dictionary<string, PP>? pp;
    private bool RO = false;

    private int inpPPid { get; set; }
    private string pointerEvent = "pe-auto";
    private bool _showModal;
    private bool showModal
    {
        get => _showModal;
        set
        {
            _showModal = value;
            pointerEvent = _showModal ? "pe-none" : "pe-auto";
        }
    }

    private void ShowModal(int ppId)
    {
        if (showModal)
            showModal = false;
        else
        {
            this.inpPPid = ppId;
            showModal = true;
        }
    }

    public void Cancelled()
    {
        showModal = false;
    }

    public void Saved()
    {
        showModal = false;
        LoadData();
    }


    private void Cancel()
    {
        // Dikkar varsa yaptiginiz tum degisiklikler yok sayilacaktir.
    }
    private void Save()
    {
        int mdfCount = 0;
        foreach (var r in to)
        {
            if (r.MF != "=")
            {
                mdfCount++;
                var ct = new
                {
                    MF = r.MF,
                    CTId = CTId,
                    PPId = r.PPId,
                };

                var rs = db.SaveRec("ITO_MDF", ct);
            }
        }
        if (mdfCount > 0)
            LoadData();

    }
    private void CheckPP(TO r)
    {
        if (pp.TryGetValue(r.PPAd, out var xx))
            r.PPId = xx.PPId;
        else
        {
            r.PPId = 0;
            r.PPAd = "";
        }
    }

    private void Original(TO r)
    {
    }
    private void Delete(TO r)
    {
        if (r.MF == "+")
        {
            to.Remove(r);
        }
        else
        {
            r.MF = "-";
        }
    }

    private void Insert()
    {
        TO ctn = new();
        ctn.MF = "+";   // Update '~' Delete '-' Insert '+' Select '='
        ctn.oMF = "+";

        to.Add(ctn);
    }

    protected override async Task OnInitializedAsync()
    {
        if (Usr.IsAdm || Usr.IsTnm)
            LoadData();
        else
            Navigation.NavigateTo("login");
    }


    private void LoadData()
    {
        to = db.LoadData<TO, dynamic>("select * from ITO_SEL(@CTId) order by PPAd", new { CTId = CTId }).ToList();
        pp = db.LoadData<PP, dynamic>("select * from LU_OYN order by Ad", new { }).ToDictionary((k) => k.Ad);
    }

    private sealed class TO
    {
        public string MF = "=";
        public int PPId { get; set; }
        public string PPAd { get; set; }

        public string oMF = "=";
    }

    private sealed class PP
    {
        public int PPId { get; set; }
        public string Ad { get; set; }
    }


}
