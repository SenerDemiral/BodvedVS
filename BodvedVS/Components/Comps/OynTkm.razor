@inject IDataAccess db
@* @attribute [StreamRendering(true)] *@
@page "/OynTkm/{ctid:int}"
<PageTitle>TakımOyuncuları</PageTitle>

@if (ot != null)
{
    <div class="table-container">
        <div class="tc--header">@((MarkupString)ti.Info)</div>

        <div class="tc--content" tabindex="-1">

            <table class="table-min">
                <colgroup>
                    <col style="width:30px;">
                    <col style="width:40px;">
                    <col style="width:150px;">
                    <col style="width:100px;">
                </colgroup>
                <thead>
                    <tr style="background-color:skyblue !important">
                        <th>Sıra</th>
                        <th>Rnk</th>
                        <th>Oyuncu</th>
                        <th>S:a±v / D:a±v</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in ot)
                    {
                        <tr>
                            <td>@r.Sra</td>
                            <td>@r.R</td>
                            <td>
                                <a href="MacOyn/@r.PPId">@r.PPAd</a>
                            </td>
                            <td>@((MarkupString)r.Stat)</td>
                        </tr>
                    }
                </tbody>
            </table>
            @* <div style="display:flex;justify-content:center;margin-top:10px;">
        <img src="@imgName" width="300" />
        </div> *@

            <object data="@imgName" type="image/jpg" style="width:200px;margin:10px auto">
                <img src="images/T0.png" alt="" />
            </object>
        </div>
    </div>
}
else
{
    <div>...</div>
}

@code {
    IEnumerable<OT>? ot;
    TI ti;
    [Parameter] public int ctid { get; set; }
    [Parameter] public string Header { get; set; }
    private string imgName => $"images/T{ctid}.jpg";

    protected override async Task OnInitializedAsync()
    {
        ti = await db.LoadRecAsync<TI, dynamic>("select * from UI_TKM_INF(@CTId)", new { CTId = ctid });

        ot = db.LoadData<OT, dynamic>("select * from UI_Oyn_Tkm(@CTId) order by R desc", new { CTId = ctid });
        int i = 1;
        foreach (var r in ot)
        {
            r.Sra = i++;
        }
    }

    private sealed class TI
    {
        public string? Info { get; set; }
    }

    private sealed class OT
    {
        public int Sra { get; set; }
        public int PPId { get; set; }
        public string PPAd { get; set; }
        public int R { get; set; }
        public string Stat { get; set; }
    }


}
