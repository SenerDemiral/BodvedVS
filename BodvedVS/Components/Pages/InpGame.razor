@inject IDataAccess db
@inject IScopedContainer sc
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/InpGame/{cetid:int}"

<style>
    input {
        width: inherit;
        /*outline: 1px solid black;*/
    }

        input:focus {
            outline: none !important;
        }

    td, th {
        border: 1px solid #dddddd;
    }

    .err {
        background-color: red;
        color: white;
    }

    .SetSnc {
        text-align: center;
        font-size: 1rem;
        font-weight: 600;
        font-family: monospace;
    }

    .double-pp {
        color: steelblue;
    }

    .hdn {
        visibility: hidden;
    }

</style>

<div style="background-color:gold;display:flex;justify-content:space-between;">
    <div>@hdr.CCAd &emsp; @hdr.Trh.ToString("dd.MM.yy") &emsp; @hdr.SklAd</div>
    <div> Durum <b>@hdr.Stu</b> &emsp;</div>
</div>

@if (ls != null)
{
    <div style="display:flex;justify-content:space-between;">
        <button disabled="@RO" @onclick="Save">✅Kaydet</button>
        <div style="color:red">@msj</div>
        <button disabled="@RO" @onclick="Create">✅Şablon</button>
    </div>

    @* <div>@hdr.CCAd &emsp; @hdr.Trh.ToString("dd.MM.yy") &emsp; @hdr.SklAd </div> *@
    <table class="table-edit">
        <thead>
            <tr style="background-color: steelblue;color: white;">
                <th></th>
                <th>#</th>
                <th>S/D</th>
                <th>@hdr.HCTAd </th>
                <th>@hdr.GCTAd </th>
                <th>@HSMW-@GSMW / @HDMW-@GDMW</th>
                <th>Setler</th>
                <th>?</th>
            </tr>
        </thead>
        @foreach (var r in ls)
        {

            @if (r.SoD == "S")
            {
                <tr @key=@($"S{r.Idx}")>
                    <td>
                        <button disabled="@RO"
                                @onclick="() => Original(r)">
                            🔄
                        </button>
                    </td>
                    <td class="text-center">@r.Idx</td>
                    <td class="text-center">@r.SoD</td>
                    <td>
                        <input list="HPP" readonly="@RO"
                               @bind="r.H1PPAd"
                               @bind:after='(() => CheckPP(r, "H1"))'>
                    </td>
                    <td>
                        <input list="GPP" readonly="@RO"
                               @bind="r.G1PPAd"
                               @bind:after='(() => CheckPP(r, "G1"))'>
                    </td>
                    <td class="SetSnc @r.Err">@r.SetSnc</td>
                    <td>
                        <div style="display:flex;">
                            @for (int i = 0; i < SSC; i++)
                            {
                                int c = i;
                                string vc = "";
                                if (RO && r.HS[c] == r.GS[c])
                                    vc = "hdn";
                                <input type="text" readonly="@RO" class="@vc"
                                       style="width:22px;text-align:end"
                                       @bind="r.HS[c]"
                                       @bind:after="(() => SetUpd(r, c, isH:true))" />
                                <span class="@vc">▪</span>
                                <input type="text" readonly="@RO" class="@vc"
                                       style="width:22px;border-right:1px solid #dddddd"
                                       @bind="r.GS[c]"
                                       @bind:after="(() => SetUpd(r, c, isH:false))" />

                            }
                        </div>
                    </td>
                    <td>
                        <input readonly="@RO"
                               type="text"
                               maxlength="30"
                               size="5"
                               list="STU"
                               @bind="r.Stu"
                               @bind:after='(() => CheckStu(r))'>
                    </td>

                </tr>
            }
            else
            {
                <tr @key=@($"S{r.Idx}") class="double-pp">
                    <td rowspan="2">
                        <button disabled="@RO"
                                @onclick="() => Original(r)">
                            🔄
                        </button>
                    </td>
                    <td rowspan="2" class="text-center">@r.Idx</td>
                    <td rowspan="2" class="text-center">@r.SoD</td>
                    <td>
                        <input list="HPP" readonly="@RO"
                               @bind="r.H1PPAd"
                               @bind:after='(() => CheckPP(r, "H1"))'>
                    </td>
                    <td>
                        <input list="GPP" readonly="@RO"
                               @bind="r.G1PPAd"
                               @bind:after='(() => CheckPP(r, "G1"))'>
                    </td>
                    <td rowspan="2" class="SetSnc @r.Err">@r.SetSnc</td>
                    <td rowspan="2">
                        <div style="display:flex;">
                            @for (int i = 0; i < DSC; i++)
                            {
                                int c = i;
                                string vc = "";
                                if (RO && r.HS[c] == r.GS[c])
                                    vc = "hdn";
                                <input type="text" readonly="@RO" class="@vc"
                                       style="width:22px;text-align:end"
                                       @bind="r.HS[c]"
                                       @bind:after="(() => SetUpd(r, c, isH:true))" />
                                <span class="@vc">▫</span>
                                <input type="text" readonly="@RO" class="@vc"
                                       style="width:22px;border-right:1px solid #dddddd"
                                       @bind="r.GS[c]"
                                       @bind:after="(() => SetUpd(r, c, isH:false))" />
                            }
                        </div>
                    </td>
                    <td rowspan="2">
                        <input readonly="@RO"
                               type="text"
                               maxlength="30"
                               size="5"
                               list="STU"
                               @bind="r.Stu"
                               @bind:after='(() => CheckStu(r))'>
                    </td>

                </tr>
                <tr @key=@($"D{r.Idx}") class="double-pp">
                    <td>
                        <input list="HPP" readonly="@RO"
                               @bind="r.H2PPAd"
                               @bind:after='(() => CheckPP(r, "H2"))' />
                    </td>
                    <td>
                        <input list="GPP" readonly="@RO"
                               @bind="r.G2PPAd"
                               @bind:after='(() => CheckPP(r, "G2"))'>
                    </td>

                </tr>
            }
        }
    </table>
}
else
{
    <div>...</div>
}

<datalist id="HPP">
    @foreach (var r in hot)
    {
        <option value="@r.Key" />
    }
</datalist>

<datalist id="GPP">
    @foreach (var r in got)
    {
        <option value="@r.Key" />
    }
</datalist>

<datalist id="STU">
    <option value="" />
    <option value="hX" />
    <option value="gX" />
    <option value="XX" />
</datalist>

@code {
    [Parameter] public int CETId { get; set; }

    private IEnumerable<LS>? ls;
    private Dictionary<string, OT>? hot;
    private Dictionary<string, OT>? got;
    private HDR hdr;

    string msj = "";
    private int mxLine = 0;
    int HSMW, HDMW, GSMW, GDMW;

    private bool RO = true;
    private string oynNA;
    private int SSC, DSC;   // Single/Double Set Count

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        //<NavigationLock ConfirmExternalNavigation="true"
        //                OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

        // Save edilmemis kayit varsa Cikip/Cikmayacagina burada karar ver
        //context.PreventNavigation();


    }

    // Lig Game Sablonuna gore bos Maclari yarat (Yoksa)
    void Create()
    {
        var rs = db.SaveRec("IG_GAME_INS", new { CETid = CETId });
        LoadData();
    }

    void Original(LS r)
    {
        r.Stu = r.oStu;
        r.H1PPAd = r.oH1PPAd;
        r.H2PPAd = r.oH2PPAd;
        r.G1PPAd = r.oG1PPAd;
        r.G2PPAd = r.oG2PPAd;

        string[] hsa = r.HST.Split(",");
        string[] gsa = r.GST.Split(",");
        for (int i = 0; i < 5; i++)
        {
            r.HS[i] = Convert.ToInt16(hsa[i]);
            r.GS[i] = Convert.ToInt16(gsa[i]);
        }
    }

    void Toplam()
    {
        HSMW = HDMW = GSMW = GDMW = 0;

        foreach (var r in ls)
        {
            if (r.SoD == "S")
            {
                GSMW += r.GW;
                HSMW += r.HW;
            }
            else
            {
                HDMW += r.HW;
                GDMW += r.GW;
            }
        }
    }

    void Kontrol()
    {
        msj = "";

        foreach (var r in ls)
        {
            KontrolRec(r);
        }
        Toplam();
    }

    void KontrolRec(LS r)
    {
        // if (!string.IsNullOrEmpty(r.Err))
        // {
        //     r.Stu = "!";
        //     return;
        // }

        // Setleri ve Statu yu hesapla
        bool hX = false;
        bool gX = false;
        if (r.H1PPId < 0 || (r.SoD == "D" && r.H2PPId < 0))
        {
            hX = true;
        }
        if (r.G1PPId < 0 || (r.SoD == "D" && r.G2PPId < 0))
        {
            gX = true;
        }
        if (hX && gX)
        {
            r.Stu = "XX";
        }
        else if (hX)
        {
            r.Stu = "hX";
        }
        else if (gX)
        {
            r.Stu = "gX";
        }
        else
        {
            r.Stu = "";
        }
        CheckStu(r);
    }
    private void CheckStu(LS r)
    {
        // Stu ya gore sonuclar save edilince BD de yapilacak
        int setCnt = SSC;
        if (r.Stu == "hX")
        {
            r.H1PPId = -1;
            r.H1PPAd = oynNA;
            if (r.SoD == "D")
            {
                r.H2PPId = -1;
                r.H2PPAd = oynNA;
                setCnt = DSC;
            }
            for (int i = 0; i < setCnt; i++)    // 5 setin 3 unu oynar, burda hepsi var, SetSnc duzeltir
            {
                r.HS[i] = 0;
                r.GS[i] = 11;
            }
            r.SetSnc = SetSnc(r);
        }
        else if (r.Stu == "gX")
        {
            r.G1PPId = -1;
            r.G1PPAd = oynNA;
            if (r.SoD == "D")
            {
                r.G2PPId = -1;
                r.G2PPAd = oynNA;
                setCnt = DSC;
            }
            for (int i = 0; i < setCnt; i++)
            {
                r.GS[i] = 0;
                r.HS[i] = 11;
            }
            r.SetSnc = SetSnc(r);
        }
        else if (r.Stu == "XX")
        {
            r.H1PPId = -1;
            r.H1PPAd = oynNA;
            r.G1PPId = -1;
            r.G1PPAd = oynNA;
            if (r.SoD == "D")
            {
                r.H2PPId = -1;
                r.H2PPAd = oynNA;
                r.G2PPId = -1;
                r.G2PPAd = oynNA;
                setCnt = DSC;
            }
            for (int i = 0; i < setCnt; i++)
            {
                r.GS[i] = 0;
                r.HS[i] = 0;
            }
            r.SetSnc = SetSnc(r);
        }
        else
        {
            SetSnc(r);
            if (string.IsNullOrEmpty(r.Err))
                r.Stu = "OK";   // Sonuc olmali veya hata olmamali
            else
                r.Stu = "!";
            //r.Stu = r.oStu;
        }
    }

    void Save()
    {
        Kontrol();

        // ls de Hatali kayit varsa Kaydetme, yoksa null geliyor
        if (ls.FirstOrDefault(r => r.Err.Equals("err")) != null)
        {
            msj = "Set sonuçları hatalı";
            return;
        }

        if (hdr.Skl == "N1")    // Klasik Teklerde bir oyuncu(PPID>0) bir kere oynayabilir
        {
            foreach (var r in ls)
            {
                if (r.SoD == "S")
                {
                    if (r.H1PPId > 0)   // 0 ve -1 N/A sayma
                    {
                        if (ls.Count(x => x.SoD == "S" && x.H1PPId == r.H1PPId) > 1)
                        {
                            msj = $"{r.H1PPAd} @ {hdr.HCTAd}  birden çok Single oynamış";
                            return;
                        }
                    }
                    if (r.G1PPId > 0)   // 0 ve -1 N/A sayma
                    {
                        if (ls.Count(x => x.SoD == "S" && x.G1PPId == r.G1PPId) > 1)
                        {
                            msj = $"{r.G1PPAd} @ {hdr.GCTAd}  birden çok Single oynamış";
                            return;
                        }
                    }
                }
            }

            foreach (var r in ls)
            {
                if (r.SoD == "D")
                {
                    if (r.H1PPId > 0)   // 0 ve -1 N/A sayma
                    {
                        if (ls.Count(x => x.SoD == "D" && x.H1PPId == r.H1PPId) > 1)
                        {
                            msj = $"{r.H1PPAd} @ {hdr.HCTAd}  birden çok Double oynamış";
                            return;
                        }
                    }
                    if (r.H2PPId > 0)   // 0 ve -1 N/A sayma
                    {
                        if (ls.Count(x => x.SoD == "D" && x.H2PPId == r.H2PPId) > 1)
                        {
                            msj = $"{r.H2PPAd} @ {hdr.HCTAd}  birden çok Double oynamış";
                            return;
                        }
                    }
                    if (r.G1PPId > 0)   // 0 ve -1 N/A sayma
                    {
                        if (ls.Count(x => x.SoD == "D" && x.G1PPId == r.G1PPId) > 1)
                        {
                            msj = $"{r.G1PPAd} @ {hdr.GCTAd}  birden çok Double oynamış";
                            return;
                        }
                    }
                    if (r.G2PPId > 0)   // 0 ve -1 N/A sayma
                    {
                        if (ls.Count(x => x.SoD == "D" && x.G2PPId == r.G2PPId) > 1)
                        {
                            msj = $"{r.G2PPAd} @ {hdr.GCTAd}  birden çok Double oynamış";
                            return;
                        }
                    }
                }
            }

        }

        // Her kaydi tek tek kaydet
        foreach (var r in ls)
        {
            // StoredProcedure input sirasina gore olmali
            var ur = new
            {
                MACId = r.MACId,
                Stu = r.Stu,
                SoD = r.SoD,
                H1PPId = r.H1PPId,
                H2PPId = r.H2PPId,
                G1PPId = r.G1PPId,
                G2PPId = r.G2PPId,
                H1 = r.HS[0],
                H2 = r.HS[1],
                H3 = r.HS[2],
                H4 = r.HS[3],
                H5 = r.HS[4],
                H6 = r.HS[5],
                H7 = r.HS[6],

                G1 = r.GS[0],
                G2 = r.GS[1],
                G3 = r.GS[2],
                G4 = r.GS[3],
                G5 = r.GS[4],
                G6 = r.GS[5],
                G7 = r.GS[6]
            };

            var rs = db.SaveRec("IG_MAC_UPD", ur);
        }
        LoadData();
    }

    private async Task KeyHandler(KeyboardEventArgs e, int row, int col)
    {
        msj = e.Code;

        if (e.Code == "ArrowDown")
        {
            // Idx 1den basliyor
            int r = row == mxLine ? 1 : row + 1;
            //await rf[r, col].FocusAsync();
        }
    }

    private void SetUpd(LS ls, int setNo, bool isH)
    {
        if (ls.HS[setNo] < 0 || ls.GS[setNo] < 0)   // Initialize
        {
            ls.HS[setNo] = 0;
            ls.GS[setNo] = 0;
        }
        else
        {
            if (isH)    // Home degisti, bunu kaybeden kabul et, Kazanani hesapla
            {
                if (ls.HS[setNo] > 28)
                    ls.HS[setNo] = 28;
                ls.GS[setNo] = ls.HS[setNo] <= 9 ? 11 : ls.HS[setNo] + 2;
            }
            else        // Guest degisti, bunu kaybeden kabul et, Kazanani hesapla
            {
                if (ls.GS[setNo] > 28)
                    ls.GS[setNo] = 28;
                ls.HS[setNo] = ls.GS[setNo] <= 9 ? 11 : ls.GS[setNo] + 2;
            }
        }
        ls.SetSnc = SetSnc(ls);
    }

    private string SetSnc(LS r)
    {
        r.Err = "";
        // Ilk 3 seti biri aldiktan sonra arkasindakiler olmaz
        int setWin = SSC - 2;
        if (r.SoD == "D")
            setWin = DSC - 2;

        int h = 0, g = 0;
        for (int i = 0; i < 7; i++)
        {
            if (r.HS[i] > r.GS[i])
            {
                h++;
            }
            else if (r.HS[i] < r.GS[i])
            {
                g++;
            }

            if (h == setWin || g == setWin)
            {
                for (int k = i + 1; k < 7; k++)
                {
                    r.HS[k] = 0;
                    r.GS[k] = 0;
                }
                break;
            }
        }

        // Setler arasinda bosluk olamaz
        // 2.Setden basla, set oynanmis ise bir oncekine bak o da oynanmis olmali
        for (int i = 1; i < 7; i++)
        {
            //if (r.HS[i] > 0 && r.GS[i] > 0)
            if ((r.HS[i] + r.GS[i]) > 0)
            {
                if ((r.HS[i - 1] + r.GS[i - 1]) == 0)
                {
                    //r.Err = "err";
                    r.HS[i] = 0;
                    r.GS[i] = 0;
                }
            }
        }


        // sonuc hesapla
        r.HSW = r.GSW = 0;
        for (int i = 0; i < 7; i++)
        {
            if (r.HS[i] > r.GS[i])
            {
                r.HSW++;
            }
            else if (r.HS[i] < r.GS[i])
            {
                r.GSW++;
            }
        }

        var mx = Math.Max(r.HSW, r.GSW);
        if (mx == 0 && r.Stu == "XX")    // Hepsi 0, Oynanmamis
            r.Err = "";
        else if (mx != setWin)
            r.Err = "err";

        return $"[{r.HSW}-{r.GSW}]";
    }

    private void CheckPP(LS r, string changedField)
    {
        if (changedField == "H1")
        {
            if (hot.TryGetValue(r.H1PPAd, out var xx))
                r.H1PPId = xx.PPId;
            else
            {
                r.H1PPId = r.oH1PPId;
                r.H1PPAd = r.oH1PPAd;
            }
        }
        else if (changedField == "H2")
        {
            if (hot.TryGetValue(r.H2PPAd, out var xx))
                r.H2PPId = xx.PPId;
            else
            {
                r.H2PPId = r.oH2PPId;
                r.H2PPAd = r.oH2PPAd;
            }
        }
        else if (changedField == "G1")
        {
            if (got.TryGetValue(r.G1PPAd, out var xx))
                r.G1PPId = xx.PPId;
            else
            {
                r.G1PPId = r.oG1PPId;
                r.G1PPAd = r.oG1PPAd;
            }
        }
        else if (changedField == "G2")
        {
            if (got.TryGetValue(r.G2PPAd, out var xx))
                r.G2PPId = xx.PPId;
            else
            {
                r.G2PPId = r.oG2PPId;
                r.G2PPAd = r.oG2PPAd;
            }
        }
    }

    // DENEME
    string CheckRec(LS ls)
    {
        ls.Err = "";
        // Setler arasinda bosluk olamaz
        // 2.Setden basla, set oynanmis ise bir oncekine bak o da oynanmis olmali
        for (int i = 1; i < 5; i++)
        {
            if (ls.HS[i] > 0 && ls.GS[i] > 0)
            {
                if ((ls.HS[i - 1] + ls.GS[i - 1]) == 0)
                {
                    ls.Err = "err";
                }
            }
        }

        // Ilk 3 seti biri aldiktan sonra arkasindakiler olmaz
        int h = 0, g = 0;
        for (int i = 0; i < 5; i++)
        {
            if (ls.HS[i] > ls.GS[i])
            {
                h++;
            }
            else if (ls.HS[i] < ls.GS[i])
            {
                g++;
            }

            if (h == 3 || g == 3)
            {
                for (int k = i + 1; k < 5; k++)
                {
                    ls.HS[k] = 0;
                    ls.GS[k] = 0;
                }
                break;
            }
        }

        int H = 0, G = 0;
        for (int i = 0; i < 5; i++)
        {
            if (ls.HS[i] > ls.GS[i])
                H++;
            else if (ls.HS[i] < ls.GS[i])
                G++;
        }

        var mx = Math.Max(H, G);
        if (mx != 3)
            ls.Err = "err";

        return $"[{H}-{G}]";

    }

    private void LoadData()
    {
        ls = db.LoadData<LS, dynamic>("select * from IG_SEL(@CETId)", new { CETId = CETId });

        RO = hdr.Stu == "??" ? false : true;

        mxLine = 0;
        foreach (var r in ls)
        {
            //r.Err = "";
            //int setAdt = r.SoD == "S" ? SSC : DSC;
            string[] hsa = r.HST.Split(",");
            string[] gsa = r.GST.Split(",");
            for (int i = 0; i < 7; i++)
            {
                r.HS[i] = Convert.ToInt16(hsa[i]);
                r.GS[i] = Convert.ToInt16(gsa[i]);
            }

            r.oStu = r.Stu;
            r.oH1PPId = r.H1PPId;
            r.oH2PPId = r.H2PPId;
            r.oG1PPId = r.G1PPId;
            r.oG2PPId = r.G2PPId;

            r.oH1PPAd = r.H1PPAd;
            r.oH2PPAd = r.H2PPAd;
            r.oG1PPAd = r.G1PPAd;
            r.oG2PPAd = r.G2PPAd;

            mxLine++;
        }
        Kontrol();
    }

    protected override async Task OnInitializedAsync()
    {
        hdr = db.LoadRec<HDR, dynamic>("select * from IG_HDR(@CETId)", new { CETId = CETId });
        hot = db.LoadData<OT, dynamic>("select * from LU_OYN_TKM(@CTId) order by Ad", new { CTId = hdr.HCTId }).ToDictionary(k => k.Ad);
        got = db.LoadData<OT, dynamic>("select * from LU_OYN_TKM(@CTId) order by Ad", new { CTId = hdr.GCTId }).ToDictionary(k => k.Ad);

        oynNA = (hot.First(x => x.Value.PPId == -1)).Key;
        SSC = hdr.TSS;  // Single SetCount
        DSC = hdr.TDS;  // Double SetCount

        LoadData();
    }

    private sealed class HDR
    {
        public string INS { get; set; }
        public string UPD { get; set; }
        public DateTime Trh { get; set; }
        public string Stu { get; set; }
        public int HCTId { get; set; }
        public string HCTAd { get; set; }
        public int GCTId { get; set; }
        public string GCTAd { get; set; }
        public string CCAd { get; set; }
        public string Skl { get; set; }
        public string SklAd { get; set; }
        public int TSS { get; set; }
        public int TDS { get; set; }
        public int TSM { get; set; }
        public int TDM { get; set; }
    }

    private sealed class OT
    {
        public int PPId { get; set; }
        public string Ad { get; set; }
    }

    private sealed class LS
    {
        public string Err { get; set; } = "";

        public int MACId { get; set; }
        public int Idx { get; set; }
        public string Stu { get; set; }
        public string SoD { get; set; }
        public string H1PPAd { get; set; }
        public string H2PPAd { get; set; }
        public string G1PPAd { get; set; }
        public string G2PPAd { get; set; }
        public string HST { get; set; }
        public string GST { get; set; }

        public int H1PPId { get; set; }
        public int H2PPId { get; set; }
        public int G1PPId { get; set; }
        public int G2PPId { get; set; }
        public string SetSnc { get; set; }

        public int[] HS = new int[7];
        public int[] GS = new int[7];

        public string oStu { get; set; }
        public int oH1PPId { get; set; }
        public int oH2PPId { get; set; }
        public int oG1PPId { get; set; }
        public int oG2PPId { get; set; }
        public string oH1PPAd { get; set; }
        public string oH2PPAd { get; set; }
        public string oG1PPAd { get; set; }
        public string oG2PPAd { get; set; }

        public int HSW; //=> HS[0] + HS[1] + HS[2] + HS[3] + HS[4] + HS[5] + HS[6];
        public int GSW; //=> GS[0] + GS[1] + GS[2] + GS[3] + GS[4] + GS[5] + GS[6];

        public int HW => HSW > GSW ? 1 : 0;
        public int GW => GSW > HSW ? 1 : 0;

    }
}
