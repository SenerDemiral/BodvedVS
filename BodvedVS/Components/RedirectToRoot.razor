@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage PLS
@inject NavigationManager Navigation
@inject IScopedContainer ScpC
@implements IDisposable


@code {
    private IDisposable? registration;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UsrPLS lm = new();
            var toto = await PLS.GetAsync<UsrPLS>("pwd", "bodved");
            if (toto.Success)
            {
                lm = toto.Value;
            }
            ScpC.CheckLogin(lm.usrid, lm.usrpwd);
        }

        base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        var rP = Navigation.ToBaseRelativePath(Navigation.Uri);        // relative path (BaseUrinin /den sonrakileri)

        // Server Side Render olursa her bi page de buraya giriyor
        // Bu yuzden InteractiveServerRenderMode olmali

        //Disardan geldiginde ilk burayi goruyor, Login gerekli page lere gitmesin
        if(rP.StartsWith("Inp"))
        {
            //Navigation.NavigateTo("", true);   // Logini ana sayfadan yapabilir Login oldugunu <CascadingLogin> ile dagit
        }
        registration = Navigation.RegisterLocationChangingHandler(OnLocationChanging);
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Butun Page degisimlerinde buraya gelir, Interractive ise StaticSSR
        // Istedigini engelle
        var aaa = Navigation;

        string target = context.TargetLocation;
        if (context.IsNavigationIntercepted)
        {
            target = Navigation.ToBaseRelativePath(context.TargetLocation);

        }

        if (target.StartsWith("Inp") && !ScpC.IsOk)   // Inp* sayfalarina Login degilse giremez
        {
           // context.PreventNavigation();
        }

        return ValueTask.CompletedTask;
    }

    public void Dispose() => registration?.Dispose();

    // Istedigin Page'e koy, cikmayi kontrol etmek icin
    // <NavigationLock ConfirmExternalNavigation="true"
    //             OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

    // private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    // {
    //     // NavigationLock kullaniyor
    //     // Eger Login gerekiyorsa engelle
    //     //context.PreventNavigation();
    // }


}