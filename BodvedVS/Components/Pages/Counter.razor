@page "/counter"
@using System.Text
@* @rendermode renderMode *@
@inject IDataAccess db
@attribute [StreamRendering(true)]

<PageTitle>Counter</PageTitle>
@*
<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<div><strong>@message</strong></div>

 *@
@if (DDs == null)
{
    <div>Pending...</div>
}
else
{
    <div class="table-container">
        <div class="tc--header">Sezonlar @((MarkupString)Emoji) Interactive olmadigi icin Sort yok</div>

        <div class="tc--content" tabindex="-1">
            <QuickGrid Items="@DDs" @ref="ddGrid" Class="table-fixed">
                <PropertyColumn Property="@(p => p.Dnm)"
                                InitialSortDirection="SortDirection.Descending"
                                IsDefaultSortColumn="true"
                                Class="text-xl border" />
                <PropertyColumn Property="@(p => p.Ad)" Class="border" />
                <TemplateColumn Title="Actions" Class="border" >
                    @* <button @onclick="@(() => Rank(context, "D"))">Oyuncular</button> *@
                    @* <button @onclick="@(() => Rank(context, "C"))">Ligler</button> *@

                    <a href="SznOynRnk/@context.Dnm" class="underline text-blue-600">Oyuncular</a>
                    @* <NavLink href=@GetLink(context) class="underline text-red-600">bbbbb</NavLink> *@
                    @* <NavLink href=@($"dd/{context.Dnm}") class="underline text-green-600">ccccc 💩</NavLink> *@
                </TemplateColumn>
            </QuickGrid>
        </div>

        <FiksturBuHafta />

    </div>

}



@if (dTyp == "D")
{
    <DonemPlayerRank Dnm=@dnm />
}
else if (dTyp == "C")
{
    <Lig Dnm=@dnm />
}
@* @((MarkupString)myMarkup) *@
@code {
    static IComponentRenderMode renderMode = new InteractiveServerRenderMode(prerender: false);

    string myMarkup = $@"
<table border='1' cellpadding='1' cellspacing='0' style='width:500px'>
	<tbody>
		<tr>
			<td>1😂</td>
			<td>4</td>
		</tr>
		<tr>
			<td>2</td>
			<td>5🤩</td>
		</tr>
		<tr>
			<td>3</td>
			<td>
			<p>&nbsp;</p>
			</td>
		</tr>
	</tbody>
</table>

<hr />
<hr />
<p>&nbsp;</p>

";
    IQueryable<DD>? DDs;
    QuickGrid<DD>? ddGrid;
    int dnm, ppId;
    string dTyp = String.Empty;

    private int currentCount = 0;
    private string? nameFilter;
    string message = string.Empty;

    
    private void IncrementCount()
    {
        currentCount++;
    }

    private string GetLink(DD p) => $"dd/{p.Dnm}";

    string Emoji;

    //void Hire(DD p) => message = $"You want to hire {p.Dnm} {p.Ad}";
    void Rank(DD p, string typ)
    {
        if (dnm != p.Dnm)
        {
            dTyp = "X";
            StateHasChanged();
        }
        dTyp = typ;
        dnm = p.Dnm;
        ppId = 90;
    }

    protected override async Task OnInitializedAsync()
    {
        //DDs = db.LoadDataQ<DD, dynamic>($"select * from DD", new { });
        //var aaa = await db.LoadDataAsync<DD, dynamic>($"select * from DD", new { });
        //DDs = aaa.AsQueryable();

        DDs = db.LoadDataQ<DD, dynamic>($"select * from DD", new { }).AsQueryable();
        //PPs = (await db.LoadDataAsync<PP, dynamic>($"select * from PP", new { })).AsQueryable();
        //PPs = cc.AsQueryable();
        
        
        //Emoji = Char.ConvertFromUtf32(Convert.ToInt32("1F1F7", 16));
        //var ccc = Char.Parse(Emoji);
        Emoji = "😕🇹🇷 👨‍💻"; //🇹 🇷
        //Emoji = "&#x1F1F9;&#x1F1F7;  👨‍💻 ";
    }
    protected override async Task OnParametersSetAsync()
    {
        //await Task.Delay(1);
        //var aaa = await db.LoadDataAsync<DD, dynamic>($"select * from DD", new { });
        //DDs = aaa.AsQueryable();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //var aaa = await db.LoadDataAsync<DD, dynamic>($"select * from DD", new { });
            //DDs = aaa.AsQueryable();
            //DDs = db.LoadDataQ<DD, dynamic>($"select * from DD", new { });
            //await myGrid.RefreshDataAsync();
            //StateHasChanged();
        }

    }

    private sealed class DD
    {
        public int Dnm { get; set; }

        public string? Ad { get; set; }
        public byte[]? Emoji { get; set; }

        //public string aaa => Encoding.UTF8.GetString(Emoji, 0, 6);
        //public string bbb => Convert.ToHexString(Emoji);
        public int c1 => BitConverter.ToUInt16(Emoji, 0);
        public int c2 => BitConverter.ToUInt16(Emoji, 2);
        public int c3 => BitConverter.ToUInt16(Emoji, 4);

    }

}
