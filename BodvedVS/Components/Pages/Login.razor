@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage PLS
@inject IScopedContainer ScpC
@inject ISingletonContainer SngC
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer
@page "/login"

<style>
    .lgn {
        display: grid;
        grid-template-columns: auto 100px;
        gap: 5px;
        margin: 1px;
    }

        .lgn .itm {
            padding: 0 6px;
            outline: 1px solid black;
        }

        .lgn .btn {
            grid-column: 1 / span 2;
            outline: 1px solid;
            background-color: cornflowerblue;
            color: aliceblue;
        }
</style>

<div class="lgn">
    <div class="itm">User#</div>
    <input type="text" @bind=usr.usrid class="itm" />
    <div class="itm">Pwd</div>
    <input type="password" @bind=usr.usrpwd class="itm" />
    <button class="btn" @onclick=LoginClck>LogIn</button>
</div>

@code {
    [CascadingParameter] CascadingScopeState CST { get; set; }
    UsrPLS usr = new();
    string Msg { get; set; }

    private async Task LoginClck()
    {
        //SngC.Name = "Heyooooooo******";

        if (ScpC.CheckLogin(usr.usrid, usr.usrpwd))
        {
            await PLS.SetAsync("pwd", "bodved", usr);
            //CST.Msg = "Login başarılı";
            Navigation.NavigateTo("");
            // default force=false
            // lm.UsrUserName = null;
            // IDictionary<string, object> objDic = lm.AsDictionary();
            // foreach(var d in objDic)
            // {
            //     var aa = d.Key;
            //     var bb = d.Value;
            //     var cc = d.Value?.GetType();
            // }
            // var someObject = objDic.ToObject<LoginModel>();


            //var vtg =  await PLS.GetAsync<LI>("pwd", "can");
            //if (vtg.Success)
            //{
            //li = vtg.Value;
            //}

        }
    }

    protected override void OnInitialized()
    {
        SngC.OnChange += MyStateChanged;

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    public void MyStateChanged()
    {
        Msg = SngC.Name;
        InvokeAsync(StateHasChanged);   //StateHasChanged(); //Hata geliyor
    }

    public void Dispose()
    {
        SngC.OnChange -= MyStateChanged;
    }

}